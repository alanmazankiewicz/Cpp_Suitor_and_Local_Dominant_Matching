plot(cars)
plot(cars,type="o")
data(cars)
cars
rm(reg1)
rm(hsb2)
boxplot(cars$speed)
mean(cars$speed)
d=density(cars$speed)
plot(d)
d=density(mtcars$mpg)
plot(d)
table(cars$speed)
a=table(cars$speed)
names(a)
b=names(a)[a==max(a)]
a=paste("A","B","C")
a
a=paste("A","B","C",1_10)
a=paste("A","B","C",1:10)
<
a
class(a)
a=paste(ABC)
a = paste("ABC", "123")
a
a = paste("A", "B", C", "123")
a = paste("A", "B", "C", "123")
a
a = paste("A", "B", "C", 1, 2)
a
a = paste(c("A", "B", "C"), c(1, 2)
a
a = paste(c("A", "B", "C"), c(1, 2))
a
a = paste(c("A", "B", "C", "D"), c(1, 2))
a
a=paste(c("A","B","C"),1:10)
a
a=paste(c("A","B","C"),1:10, sep=",")
a
a=paste(c("A","B","C"),1:10, collapse=",")
a
length(a)
a=paste(c("A","B","C"),1:10)
length(a)
a=1:10
a
vek=(a>2)&(a>5)
vek
vek=(a>2)&(a<5)
vek
vek=(1:10>2)&(1:10<5)
a
vek
vek=c((1:10>2)&(1:10<5))
vek
max(a)
which.max(a)
b=table(cars)
b
b=table(cars$speed)
b
max(b)
which.max
which.max(b)
max(b)
which.max(b)
names(cars)
names(cars)[2]="distance"
cars
row.names(cars)=paste("A",1:50)
cars
row.names(cars)=paste("A","B","C",1:50)
cars
row.names(cars)=paste(c("A","B","C"),1:50)
cars
cars.matrix=as.matrix(cars)
cars.matrix
row.names(cars.matrix)=1:50
cars.matrix
head(cars)
list()
objects()
z=table(cars)
z
z=table(cars$speed)
z
names(z)
z[2]
z[2,2]
ls()
source('~/Desktop/Test.R')
test.function(2,2)
View(test.function)
View(test.function)
View(test.function)
d=density(mtcars$mpg)
max(d$y)
which.max(d$y)
d
class
class(d)
max(cars)
max(cars$speed)
max(cars$distance)
which.max(cars$speed)
cars[50]
cars[50,]
answer = 42
lm()
ls()
ls()[,1]
ls()[1]
exp(1)
pi
sum(1,2,3)
a = 48146 - (56^3)/4
b = sample(, 5, replace = TRUE, prob = normal)
b = sample(10:100, 5, replace = TRUE, prob = normal)
b = sample(, 5, replace = TRUE)
b = sample(5, 5, replace = TRUE)
b = sample(100, 5, replace = TRUE)
b = sample(100, 5, replace = TRUE)
b = sample(100, 5, replace = TRUE)
b = sample(100, 5, replace = TRUE)
b = sample(100, 5, replace = TRUE)
b = sample(100:1000, 5, replace = TRUE)
b = sample(100:1000, 5, replace = TRUE, prob = 0,5)
help(sample)
b = sample(1, 5, replace = TRUE, prob = 0,5)
b = sample(1, 5, replace = TRUE)
source('~/.active-rstudio-document')
y(3,4)
x=1+2i
class(x)
2+x
o= as.integer(TRUE)
o
my.vector = c(2,1,3,4)
my.vector = c(2,1,3,4,6)
funky.vector = c(TURE, FALSE, TRUE)
funky.vector = c(TRUE, FALSE, TRUE)
o = (2,1,2)
o = 2,1,2
really.funky.vector= c(my.vector, funky.vector)
test.vector = c("medium","well")
factor(test.vector, levels = c("well","medium"))
my.factor=factor(test.vector, levels = c("well","medium"))
unclass(my.factor)
a=unclass(my.factor)
a
summary(really.funky.vector)
list(really.funky.vector)
table(really.funky.vector)
a=table(really.funky.vector)
names(a)
names(a)[2]="B"
names(a)
a
matrix.data=c(1,4,2,2,5,2,4,4,NA,NA,3,NA,2,5,NA,5,4,1,NA,1,NA,2,5,NA)
test.matrix=matrix(matrix.data, nrows = 4, ncol = 6, byrow = TRUE)
test.matrix=matrix(matrix.data, nrow = 4, ncol = 6, byrow = TRUE)
test.matrix
test.matrix=matrix(matrix.data, nrow = 6, ncol = 4, byrow = TRUE)
test.matrix
dimnames(test.matrix)=list(c("Ken","Lee","Meg","Nan"), c(1,2,3,4,5,6))
dimnames(test.matrix)=list(c(1,2,3,4,5,6), c("Ken","Lee","Meg","Nan"))
test.matrix
mean.rating.k=mean(test.matrix)[,1]
mean.rating.k= mean(test.matrix[,1])
mean.rating.k
mean.rating.k = as.integer(mean(test.matrix[,1]))
mean.rating.k = (mean(test.matrix[,1], na.rm = TRUE)
mean.rating.k = (mean(test.matrix, na.rm = TRUE)[,1]
mean.rating.k = mean(test.matrix, na.rm = TRUE)[,1]
mean.rating.k = mean(test.matrix[,1], na.rm = TRUE)
mean.rating.k = as.numeric(mean(test.matrix[,1], na.rm = TRUE))
mean.rating.k = as.decimal(mean(test.matrix[,1], na.rm = TRUE))
mean.rating.l = (mean(test.matrix[,2], na.rm = TRUE))
r.a.l= cor(test.matrix[,1], test.matrix[,2], na.rm = TRUE)
r.a.l= cor(test.matrix[,1], test.matrix[,2])
?use
?cor
r.a.l= cor(test.matrix[,1], test.matrix[,2], use = "complete.obs")
r.k.l= cor(test.matrix[,1], test.matrix[,2], use = "complete.obs")
rm(r.a.l, reg1, hsb2)
mean.rating.m = (mean(test.matrix[,3], na.rm = TRUE))
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "complete.obs")
r.k.l= cor(test.matrix[,1], test.matrix[,2], use = "complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,4], use = "complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,2], use = "complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "all.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "na.or.complete")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "pairwise.complete.obs")
r.k.m= cor(test.matrix[,1], test.matrix[,3], use = "complete.obs")
2,5423+2,65232
2.5423+2.65232
a=2.5423+2.65232
rm(a)
save.image("~/CF Recommender.RData")
load("/Users/Mazan/Dropbox/KIT/Vorlesungen/1 Semester/Recommender/CF Recommender.RData")
c <-c(1:20)
mean(c)
e <- c(d, 30)
d <- c(1:20)
e <- c(d, 30)
mean(c)
mean(d)
e <- c(d, 30)
mean(e)
e
mean(d)*1/(length(d) + 1)*30
e = ()
e = vector(mode = "numeric")
e = vector(mode = "numeric")
for i in (1:length(d)){
e[i] = d[i] * 1/length(d)
}
for i in 1:length(d){
e[i] = d[i] * 1/length(d)
}
for (i in 1:length(d)){
e[i] = d[i] * 1/length(d)
}
sum(e)
?runif
runif(5,4,20)
runif(20,0,20)
plot(runif(20,0,20))
plot(runif(100,0,20))
c(1,2,3,4) +c(1,2)
c(1,2,3,4) +c(1,2,3)
c(1,2,3,4) > 1
iris <- load(iris)
iris <- load("iris")
iris <- data("iris")
iris
iris <- data(iris)
iris
data(iris)
iris
View(iris)
libary(ggplot2)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_plot()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_dotplot()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point()
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) + geom_point()
library(dplyr)
filter(iris, Species= "setosa")
filter(iris, Species== "setosa")
filter(iris, Species== "setosa")[1]
mean(filter(iris, Species== "setosa")[1])
?summarise
summarise(iris, avg = mean(Sepal.Length))
summarise(iris, mean(Sepal.Length))
1:20
group_by(iris, Species)
?group_by
group_by(iris, Species) %>% summarise(mean)
group_by(iris, Species) %>% summarise(...,)
group_by(iris, Species) %>% summarise(..., mean)
by_Species <- group_by(iris, Species)
summarise(by_Species, mean(Septal.Length))
summarise(by_Species, mean(Sepal.Length))
group_by(iris, Species) %>% summarise(mean(Sepal.Length)
a
group_by(iris, Species) %>% summarise(..., mean(Sepal.Length)
a
group_by(iris, Species) %>% summarise(mean(Sepal.Length))
summarise(by_Species, mean(Sepal.Length))
iris %>% group_by(Species) %>% summarise(mean(Sepal.Length))
?apply
?lambda
apply(iris[,0], 2, function{x*2})
times2 <- function(x){}
times2 <- function(x){
x*2
}
apply(iris[,0], 2, times2)
load("iris")
data("iris")
iris
library(randomForest)
names(iris)
?randomForest
randomForest(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris, importance = T)
a = randomForest(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris, importance = T)
a$importance
install.packages("Igraph")
install.packages("igraph")
data = data.frame([["a", "b"], ["b", "c"], ["c", "a"], ["a", "c"]])
data = data.frame((("a", "b"), ("b", "c"), ("c", "a"), ("a", "c"))
n = c(2, 3, 5)
> s = c("aa", "bb", "cc")
> b = c(TRUE, FALSE, TRUE)
> df = data.frame(n, s, b)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
data = data.frame(("a", "b"), ("b", "c"), ("c", "a"), ("a", "c"))
data = data.frame(c(c("a", "b"), c("b", "c"), c("c", "a"), c("a", "c")))
data = data.frame(c(c("a", "b"), c("b", "c"), c("c", "a"), c("a", "c")))
View(data)
data = data.frame(a,b,c,d)
a = c("a", "b")
b = c("b", "c")
c = c("c", "a")
d = c("a", "c")
data = data.frame(a,b,c,d)
View(data)
?data.frame
t(data)
data = t(data)
View(data)
nodes = c("a", "b", "c", "d")
net <- graph_from_data_frame(d=data, vertices=nodes, directed=T)
library(igraph)
net <- graph_from_data_frame(d=data, vertices=nodes, directed=T)
net
plot(net)
nodes = c("a", "b", "c")
net <- graph_from_data_frame(d=data, vertices=nodes, directed=T)
plot(net)
mod(4)
source('~/Dropbox/KIT/Vorlesungen/1 Semester/Modeling with R/Übungen/Phil/Titanic-own.R', echo=TRUE)
source('~/Dropbox/KIT/Vorlesungen/1 Semester/Modeling with R/Übungen/Phil/Titanic-own.R', echo=TRUE)
View(data)
source('~/OneDrive - bwedu/KIT/Vorlesungen/3 Semester/AGD Prakti/Repo/Phase1/Week 02 Baselines/Week02_Neue_Daten_Aufbereitung.R', echo=TRUE)
install.packages("RWeka")
library(RWeka)
q()
2+2
2+2
2+2
get_wed()
getwd()
R.home()
path.expand("~")
.First <- function(){
Sys.setenv(PATH = paste("/Users/Mazan/anaconda/bin/", Sys.getenv("PATH"), sep=":"))
setwd("~/OneDrive - bwedu/KIT/Vorlesungen/3 Semester/AGD Prakti/Energy-Phase-2/Repo/Phase2")
}
install.packages("dplyr")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("jsonlite")
library(jsonlite)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
install.packages("tidyverse")
library(dplyr)
etf <- fromJSON(content(url, as = "text"), flatten = TRUE) %>%
mutate(fundBasics.issuer = str_replace_all(fundBasics.issuer, "(\\<.*\\>)(.*)(\\<.*\\>)", "\\2"),
fundBasics.segment = str_replace_all(fundBasics.segment, "\\s+", " "),
fundBasics.expenseRatio.value = fundBasics.expenseRatio.value / 10000)
etf <- fromJSON(content(url, as = "text"), flatten = TRUE)
?fromJSON()
?GET
l <- GET("http://httpbin.org/get")
print(l)
print(url)
h <- GET("https://www.ishares.com/de/privatanleger/de/produkte/etf-product-list#")
print(g)
print(h)
headers(h)
getwd()
?read.table
test = read.table("/Users/Mazan/Desktop/test.txt", sep = " ")
View(test)
test = read.table("/Users/Mazan/Desktop/rgg_n_2_18_s0.txt", sep = " ")
View(test)
View(test)
lol = test[, 0].unqiue()
lol = test[:, 0].unqiue()
lol = test["V1"].unqiue()
lol = test["V1"].unqiue()
lol = test.V1.unqiue()
lol = test[1:, 1]unqiue()
lol = test[], 1].unqiue()
lol = test[, 1].unqiue()
lol = test[, 1]
lol2 = unique(lol)
lol = c(test[, 1], test[,2])
lol2 = unique(lol)
lol[6189132 / 2]
lol[(6189132 / 2) + 1]
lol2 = unique(lol)
lol[(6189132 / 2) + 1]
source('~/.active-rstudio-document', echo=TRUE)
dim(lol2)
length(lol2)
sum(is.na(test$V1))
sum(is.na(test$V2))
test = read.table("/Users/Mazan/Desktop/test.txt", sep = " ")
lol = c(test[, 1], test[,2])
lol2 = unique(lol)
length(lol2)
source('~/.active-rstudio-document', echo=TRUE)
(comparer == lol2) == FALSE
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lol = c(test[, 1], test[,2])
lol2 = unique(lol)
true_nodes = length(lol2)
comparer = c(1:true_nodes)
nodes_15 = 32768
sum((comparer == lol2) == FALSE)
nodes_15 >= length(lol2)
min(lol2)
max(lol2)
length(lol2)
lol = c(test[, 1], test[,2])
lol2 = unique(lol)
true_nodes = length(lol2)
comparer = c(0:max(lol2))
nodes_15 = 32768
sum((comparer == lol2) == FALSE)
nodes_15 >= length(lol2)
# min(lol2)
# max(lol2)
# length(lol2)
length(comparer)
length(lol2)
lol2[((comparer == lol2) == F)][1:5]
lol2 = unique(lol)
sort(lol2)
lol = c(test[, 1], test[,2])
lol2 = sort(unique(lol))
true_nodes = length(lol2)
comparer = c(0:max(lol2))
nodes_15 = 32768
sum((comparer == lol2) == FALSE)
nodes_15 >= length(lol2)
# min(lol2)
# max(lol2)
# length(lol2)
length(comparer)
length(lol2)
comparer
lol2
length(comparer)
length(lol2)
max(comparer)
max(lol2)
min(comparer)
min(lol2)
(comparer == lol2) == FALSE)[0]
((comparer == lol2) == FALSE)[0]
((comparer == lol2) == FALSE)
lol2[((comparer == lol2) == FALSE)][1]
comparer[((comparer == lol2) == FALSE)][1]
sum(lol2 == 4338)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/OneDrive - bwedu/KIT/Vorlesungen/4 Semester/Effizientes C++/Repo/efficient-parallel-cpp/exercise5/evaluation/3.4_3.5")
setwd("~/OneDrive - bwedu/KIT/Vorlesungen/4 Semester/Effizientes C++/Repo/efficient-parallel-cpp/exercise5/evaluation")
source('~/OneDrive - bwedu/KIT/Vorlesungen/4 Semester/Effizientes C++/Repo/efficient-parallel-cpp/exercise5/evaluation/3.4_3.5/plot.R', echo=TRUE)
View(std_dyn)
source('~/OneDrive - bwedu/KIT/Vorlesungen/4 Semester/Effizientes C++/Repo/efficient-parallel-cpp/exercise5/evaluation/3.4_3.5/plot.R', echo=TRUE)
